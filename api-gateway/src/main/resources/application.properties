# --- Application Info ---
# Sets the name this service registers with Eureka and its listening port
spring.application.name=api-gateway
server.port=8080

# Apply the custom AuthenticationFilter globally
spring.cloud.gateway.default-filters[0]=AuthenticationFilter

# --- Enable Service Discovery Locator ---
# Allows the Gateway to automatically create routes based on service IDs from Eureka (optional, we define routes explicitly below)
spring.cloud.gateway.discovery.locator.enabled=true
# Use lowercase service IDs when looking up in Eureka (matches default Eureka behavior)
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# --- Explicit Route Definitions ---
# Define how incoming requests are mapped to downstream services

# Route requests for Auth Service (/register, /login)
# Unique identifier for this route definition
spring.cloud.gateway.routes[0].id=auth-service-route
# Target service URI. 'lb://' tells Gateway to use Eureka + Load Balancer to find 'auth-service'
spring.cloud.gateway.routes[0].uri=lb://auth-service
# Predicate: Match requests whose path starts with /register OR /login
spring.cloud.gateway.routes[0].predicates[0]=Path=/register/**, /login/**
# Filter: Forward the request path as-is (e.g., /login remains /login)
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=0

# Route requests for Job Service (/posts/**)
spring.cloud.gateway.routes[1].id=job-service-route
# Target service: job-service registered in Eureka
spring.cloud.gateway.routes[1].uri=lb://job-service
# Predicate: Match requests whose path starts with /posts/
spring.cloud.gateway.routes[1].predicates[0]=Path=/posts/**
# Filter: Forward the request path as-is
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=0

# Route requests for Candidate Service (/candidate/**)
spring.cloud.gateway.routes[2].id=candidate-service-route
# Target service: candidate-service registered in Eureka
spring.cloud.gateway.routes[2].uri=lb://candidate-service
# Predicate: Match requests whose path starts with /candidate/
spring.cloud.gateway.routes[2].predicates[0]=Path=/candidate/**
# Filter: Forward the request path as-is
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=0

# --- Eureka Client Configuration ---
# Specifies the location of the Eureka server for registration and discovery
eureka.client.service-url.defaultZone=${EUREKA_URL:http://localhost:8761/eureka/}
# Prefer registering with IP address instead of hostname (often more reliable in containerized/cloud environments)
eureka.instance.prefer-ip-address=true

# --- Logging (Optional, useful for debugging Gateway routing) ---
logging.level.org.springframework.cloud.gateway=INFO 
# Set to TRACE for very detailed routing logs
logging.level.reactor.netty.http.client=INFO 
# Set to DEBUG for network-level details

# --- JWT Secret (IMPORTANT - Placeholder!) ---
# This secret key MUST be the same Base64 encoded key used in your Auth Service (JwtUtil)
# Replace this placeholder with your actual strong, Base64 encoded secret key.
jwt.secret=${JWT_SECRET}
# <- REPLACE THIS PLACEHOLDER

